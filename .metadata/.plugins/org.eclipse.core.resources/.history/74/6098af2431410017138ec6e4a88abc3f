package com.dao;

import java.util.Date;
import java.sql.SQLException;
//import java.util.ArrayList;
import java.util.List;

import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.Criteria;
//import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;
//import org.hibernate.Session;
import org.hibernate.transform.Transformers;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.hibernate.type.IntegerType;
import org.hibernate.type.StringType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate3.HibernateCallback;
//import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

//import com.domain.Employee;
/*import com.domain.Employee;*/
import com.domain.Impression;
import com.domain.ImpressionCount;

@Repository("impressionDao")
@Transactional(propagation = Propagation.REQUIRED)
public class ImpressionDaoImpl implements ImpressionDao{

	@Autowired
	private HibernateTemplate hibernateTemplate;
	
	@Override
	public void save(Impression impression) {
		hibernateTemplate.save(impression);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ImpressionCount> getImpressionCount() {
		
		@SuppressWarnings("rawtypes")
		List<ImpressionCount> resultList = (List<ImpressionCount>) hibernateTemplate.execute(new HibernateCallback(){
			
			@Override
			public Object doInHibernate(org.hibernate.Session session) throws HibernateException, SQLException {
				Query query = session.createSQLQuery("select 1 Eid,lower(employee_name) Ename,count(impression_id) iCount from impressions group by lower(employee_name) order by iCount desc").addScalar("Eid",new IntegerType()).addScalar("Ename",new StringType())
						.addScalar("iCount", new IntegerType());
				return (List<ImpressionCount>) query.setResultTransformer(Transformers.aliasToBean(com.domain.ImpressionCount.class)).list();
			}
		});
		
		return resultList;
		/*ImpressionCount x = new ImpreossionCount();
		x.setEid(1);
		x.setEname("Santosh");
		x.setCount(15);
		List<ImpressionCount> l = new ArrayList<ImpressionCount>();
		l.add(x);
		return l;*/
	}
	
	@Override
	@Temporal(TemporalType.TIMESTAMP)
	public List<Impression> getImpressionByEmpId(int eid , String from_time , String to_time) {
		Date from = null;
		try {
			from = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a").parse(from_time);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Date to = null;
		try {
			to = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a").parse(to_time);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		@SuppressWarnings("unchecked")
		
		Criteria c = hibernateTemplate.getSessionFactory().openSession().createCriteria(Impression.class);
		Transaction tx = hibernateTemplate.getSessionFactory().getCurrentSession().beginTransaction();
		c.add(Restrictions.eq("eid", eid));
		c.add(Restrictions.between("impression_time",from,to));
		//c.add(Restrictions.le("impressions_time", to));
		List<Impression> imp= (List<Impression>) c.list();//hibernateTemplate.find("from Impression i where i.eid = '"+eid+"'"+"and i.impression_time between '"+from +"' and '"+to+"'");
		
	//	tx.commit();
		return imp;
	}

//	@Override
//	public void saveEmployee(Employee employee) {
//		hibernateTemplate.saveOrUpdate(employee);
//		
//	}

}
